# This file is a template, and might need editing before it works on your project.

image: debian:bookworm

variables:
  # Needed if you want automatic submodule checkout
  # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: normal

.src_dir_ref_storage: &src_dir_ref_storage
  - mkdir -p build
  - pwd > build/original_source_directory

.src_dir_ref_replacement: &src_dir_ref_replacement
  - old_sdir=`cat build/original_source_directory`
  - this_sdir=`pwd`
  - find build
    -type f -a
    \! \(
      -perm /111 -o
      \(
        -name '*.o' -o -name '*.a' -o -name '*.so'
      \)
    \)
    -exec sed -i "s|$old_sdir|$this_sdir|g" {} +

.common:
  tags: [k8srunner]
  artifacts:
    paths:
      - build

stages:
  - build
  - test
  # - linting
  # - pages
  # - publish

.build_packages: &build_packages
  # LLVM-7
  - apt install -y lsb-release wget software-properties-common gnupg
  - wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
  - add-apt-repository -y 'deb http://apt.llvm.org/unstable/ llvm-toolchain main'
  - add-apt-repository -y 'deb http://apt.llvm.org/unstable/ llvm-toolchain main'
  - apt update && apt install -y clang-17 clang-tools-17 libc++-17-dev libc++abi-17-dev
  - ln -s ../../llvm-17/lib/clang/17/include /usr/lib/clang/17/include --force
  - ln -s ../../llvm-17/lib/clang/17/lib /usr/lib/clang/17/lib --force
  # CMake
  - apt install wget && wget https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh
  - bash ./cmake-3.26.4-linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license
  # Extra
  - apt install -y python3-pip ninja-build pipx
  # Conan
  - pipx run conan==1.60.0 config init
  - apt install -y jq
  - pipx run yq '.compiler.clang.version += [ "17" ]' /root/.conan/settings.yml -i -Y

.test_packages: &test_packages
  # LLVM-7
  - apt install -y lsb-release wget software-properties-common gnupg
  - wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
  - add-apt-repository -y 'deb http://apt.llvm.org/unstable/ llvm-toolchain main'
  - add-apt-repository -y 'deb http://apt.llvm.org/unstable/ llvm-toolchain main'
  - apt update && apt install -y libc++-17-dev libc++abi-17-dev

.docker_common:
  image: docker:stable
  tags:
    - k8srunner
  before_script:
    # - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
    - apk update
    - apk upgrade
    - apk add bash
    - echo $CAR_OCI_REGISTRY_PASSWORD | docker login -u $CAR_OCI_REGISTRY_USERNAME --password-stdin $CAR_OCI_REGISTRY_HOST
    - docker info

# Build

build_debug:
  extends: .common
  stage: build
  before_script:
    - apt update
    - *build_packages
    - *src_dir_ref_storage
  script:
    - mkdir -p build
    - pipx run conan==1.60.0 install . -g cmake_multi -if build -s build_type=Debug --build=missing --profile=profile-clang.txt
    - cmake -B build -G "Ninja Multi-Config" -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCONAN_COMPILER=clang -DCONAN_COMPILER_VERSION=17 -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage"
    - cmake --build build --config Debug

build_release:
  extends: .common
  stage: build
  before_script:
    - apt update
    - *build_packages
    - *src_dir_ref_storage
  script:
    - mkdir -p build
    - pipx run conan==1.60.0 install . -g cmake_multi -if build -s build_type=Release --build=missing --profile=profile-clang.txt
    - cmake -B build -G "Ninja Multi-Config" -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCONAN_COMPILER=clang -DCONAN_COMPILER_VERSION=17
    - cmake --build build --config Release

docker_build:
  stage: build
  extends: .docker_common
  script:
    # The docker image tag is:
    #  * The git tag (without the initial "v") if building a git tag
    #  * "latest" when building the master branch
    #  * Other branches do not yield a docker image
    - IMAGE_NAME=$CI_PROJECT_TITLE
    - BRANCH=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - bash ./docker/docker-build.sh $CAR_OCI_REGISTRY_HOST/$IMAGE_NAME:dev-$CI_COMMIT_SHORT_SHA .

# Test

test_debug:
  extends: .common
  stage: test
  needs: ["build_debug"]
  before_script:
    - apt update
    - *test_packages
    - *src_dir_ref_replacement
  script:
    ./build/ska-cpp-template/foobar/tests/Debug/foobar_tests
  timeout: 30m
  allow_failure: true